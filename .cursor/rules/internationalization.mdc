# PomeloX 国际化(i18n)设计规范

## 多语言支持策略

### 支持的语言
- **主要语言:** 简体中文 (zh-CN) - 核心目标用户
- **次要语言:** 英语 (en-US) - 国际化扩展和技术文档
- **未来扩展:** 繁体中文 (zh-TW)、韩语 (ko-KR)

### 语言优先级
1. **中文优先:** 所有功能首先用中文设计和实现
2. **英文同步:** 在开发过程中同步考虑英文本地化
3. **技术英文:** 代码、API、数据库等技术层面使用英文

## 前端国际化设计

### iOS 多语言架构
```swift
// 推荐的本地化文件结构
/Resources
  /Localizations
    /zh-Hans.lproj
      Localizable.strings
      InfoPlist.strings
    /en.lproj
      Localizable.strings
      InfoPlist.strings
```

### 文本管理规范
- 所有用户可见文本通过本地化文件管理
- 使用有意义的 key 命名：`auth.login.title` 而不是 `text1`
- 支持参数化文本：`"欢迎 %@"` / `"Welcome %@"`
- 考虑文本长度差异对 UI 布局的影响

### UI 适配考虑
- **文本长度:** 英文通常比中文长 20-30%
- **阅读方向:** 保持从左到右的阅读习惯
- **字体选择:** 中文使用系统字体，英文考虑可读性
- **按钮尺寸:** 根据文本长度动态调整

## 后端国际化设计

### API 响应本地化
基于 [API_DOC.md](mdc:API_DOC.md) 的接口规范扩展：

```json
// 请求头包含语言偏好
{
  "Accept-Language": "zh-CN,en-US;q=0.8"
}

// 响应包含本地化消息
{
  "error": {
    "code": "INVALID_REQUEST",
    "message": "邮箱格式不正确",
    "message_en": "Invalid email format",
    "details": {...}
  }
}
```

### 数据库多语言设计
基于 [DB_SCHEMA.md](mdc:DB_SCHEMA.md) 扩展多语言支持：

```sql
-- 文章表支持多语言
CREATE TABLE articles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title_zh VARCHAR(500) NOT NULL,
    title_en VARCHAR(500),
    content_zh TEXT NOT NULL,
    content_en TEXT,
    language VARCHAR(10) DEFAULT 'zh-CN',
    -- 其他字段...
);

-- 多语言翻译表
CREATE TABLE translations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    resource_type VARCHAR(50) NOT NULL, -- 'article', 'category', etc.
    resource_id UUID NOT NULL,
    language_code VARCHAR(10) NOT NULL,
    field_name VARCHAR(50) NOT NULL,
    translated_text TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now()
);
```

## AI 问答多语言支持

### 智能语言检测
- 自动检测用户输入语言
- 根据用户语言偏好回答
- 支持中英文混合问答

### 知识库多语言化
- 核心知识库维护中英文版本
- 英文内容重点覆盖学术和官方信息
- 中文内容重点覆盖生活和文化适应

### 回答策略
```python
# 示例：AI回答的多语言处理
def generate_ai_response(question: str, user_lang: str = "zh-CN"):
    if user_lang == "en-US":
        prompt = f"Answer in English: {question}"
        context = load_english_knowledge_base()
    else:
        prompt = f"用中文回答: {question}"
        context = load_chinese_knowledge_base()
    
    return ai_model.generate(prompt, context=context)
```

## 内容管理多语言化

### 文章内容策略
- **中文内容:** 详细的生活指南、文化适应、家长关怀
- **英文内容:** 学术信息、官方流程、法律相关
- **双语内容:** 重要通知、安全信息、紧急联系

### 分类和标签
```python
# 多语言分类示例
CATEGORIES = {
    "visa": {
        "zh": "签证申请",
        "en": "Visa Application"
    },
    "housing": {
        "zh": "住房租赁", 
        "en": "Housing & Rental"
    },
    "emergency": {
        "zh": "紧急联系",
        "en": "Emergency Contact"
    }
}
```

## 实施建议

### 开发阶段规划
1. **MVP 阶段:** 中文为主，英文占位
2. **V2 阶段:** 完善英文本地化
3. **V3 阶段:** 考虑其他语言扩展

### 翻译工作流程
1. **专业翻译:** 重要内容使用专业翻译服务
2. **社区翻译:** 非核心内容可以考虑社区贡献
3. **AI 辅助:** 使用 AI 进行初步翻译，人工校对

### 质量保证
- 建立翻译审核流程
- 定期检查翻译质量
- 收集用户反馈改进翻译

## 技术实现要点

### 语言切换
- 用户可以在设置中切换语言
- 记住用户语言偏好
- 支持系统语言自动检测

### 性能优化
- 按需加载语言资源
- 缓存常用翻译内容
- 压缩本地化文件大小

### 测试策略
- 不同语言环境下的功能测试
- UI 布局在不同语言下的适配测试
- 文本截断和换行处理测试
